/// <reference types="node" resolution-mode="require"/>
/**
 * A class representing the Node.js implementation of Hfs.
 * @implements {HfsImpl}
 */
export class NodeHfsImpl implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} [options] The options for the instance.
     * @param {Fsp} [options.fsp] The file system module to use.
     */
    constructor({ fsp }?: {
        fsp?: Fsp;
    });
    /**
     * Reads a file and returns the contents as an Uint8Array.
     * @param {string|URL} filePath The path to the file to read.
     * @returns {Promise<Uint8Array|undefined>} A promise that resolves with the contents
     *    of the file or undefined if the file doesn't exist.
     * @throws {Error} If the file cannot be read.
     * @throws {TypeError} If the file path is not a string.
     */
    bytes(filePath: string | URL): Promise<Uint8Array | undefined>;
    /**
     * Writes a value to a file. If the value is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The path to the file to write.
     * @param {Uint8Array} contents The contents to write to the
     *   file.
     * @returns {Promise<void>} A promise that resolves when the file is
     *  written.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be written.
     */
    write(filePath: string | URL, contents: Uint8Array): Promise<void>;
    /**
     * Appends a value to a file. If the value is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The path to the file to append to.
     * @param {Uint8Array} contents The contents to append to the
     *  file.
     * @returns {Promise<void>} A promise that resolves when the file is
     * written.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be appended to.
     */
    append(filePath: string | URL, contents: Uint8Array): Promise<void>;
    /**
     * Checks if a file exists.
     * @param {string|URL} filePath The path to the file to check.
